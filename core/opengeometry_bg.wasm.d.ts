/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export const __wbg_ogcylinder_free: (a: number, b: number) => void;
export const ogcylinder_set_id: (a: number, b: number, c: number) => void;
export const ogcylinder_id: (a: number) => [number, number];
export const ogcylinder_new: (a: number, b: number) => number;
export const ogcylinder_set_config: (a: number, b: number, c: number, d: number, e: number, f: number) => void;
export const ogcylinder_generate_brep: (a: number) => void;
export const ogcylinder_clean_geometry: (a: number) => void;
export const ogcylinder_generate_geometry: (a: number) => void;
export const ogcylinder_get_brep_serialized: (a: number) => [number, number];
export const ogcylinder_get_geometry_serialized: (a: number) => [number, number];
export const ogcylinder_get_outline_geometry_serialized: (a: number) => [number, number];
export const __wbg_ogarc_free: (a: number, b: number) => void;
export const ogarc_set_id: (a: number, b: number, c: number) => void;
export const ogarc_id: (a: number) => [number, number];
export const ogarc_new: (a: number, b: number) => number;
export const ogarc_set_config: (a: number, b: number, c: number, d: number, e: number, f: number) => void;
export const ogarc_generate_geometry: (a: number) => void;
export const ogarc_dispose_points: (a: number) => void;
export const ogarc_destroy: (a: number) => void;
export const ogarc_get_brep_serialized: (a: number) => [number, number];
export const ogarc_get_geometry_serialized: (a: number) => [number, number];
export const __wbg_ogline_free: (a: number, b: number) => void;
export const ogline_set_id: (a: number, b: number, c: number) => void;
export const ogline_id: (a: number) => [number, number];
export const ogline_new: (a: number, b: number) => number;
export const ogline_set_config: (a: number, b: number, c: number) => void;
export const ogline_generate_geometry: (a: number) => void;
export const ogline_dispose_points: (a: number) => void;
export const ogline_destroy: (a: number) => void;
export const ogline_get_brep_serialized: (a: number) => [number, number];
export const ogline_get_geometry_serialized: (a: number) => [number, number];
export const __wbg_ogpolygon_free: (a: number, b: number) => void;
export const ogpolygon_set_id: (a: number, b: number, c: number) => void;
export const ogpolygon_id: (a: number) => [number, number];
export const ogpolygon_new: (a: number, b: number) => number;
export const ogpolygon_set_config: (a: number, b: number, c: number) => void;
export const ogpolygon_set_transformation: (a: number, b: number, c: number) => void;
export const ogpolygon_add_vertices: (a: number, b: number, c: number) => void;
export const ogpolygon_add_holes: (a: number, b: number, c: number) => void;
export const ogpolygon_clean_geometry: (a: number) => void;
export const ogpolygon_generate_brep: (a: number) => void;
export const ogpolygon_generate_geometry: (a: number) => void;
export const ogpolygon_get_brep_serialized: (a: number) => [number, number];
export const ogpolygon_get_geometry_serialized: (a: number) => [number, number];
export const ogpolygon_get_outline_geometry_serialized: (a: number) => [number, number];
export const __wbg_ogrectangle_free: (a: number, b: number) => void;
export const ogrectangle_set_id: (a: number, b: number, c: number) => void;
export const ogrectangle_id: (a: number) => [number, number];
export const ogrectangle_new: (a: number, b: number) => number;
export const ogrectangle_set_config: (a: number, b: number, c: number, d: number) => void;
export const ogrectangle_generate_geometry: (a: number) => void;
export const ogrectangle_get_brep_serialized: (a: number) => [number, number];
export const ogrectangle_get_geometry_serialized: (a: number) => [number, number];
export const __wbg_colorrgb_free: (a: number, b: number) => void;
export const __wbg_get_colorrgb_r: (a: number) => number;
export const __wbg_set_colorrgb_r: (a: number, b: number) => void;
export const __wbg_get_colorrgb_g: (a: number) => number;
export const __wbg_set_colorrgb_g: (a: number, b: number) => void;
export const __wbg_get_colorrgb_b: (a: number) => number;
export const __wbg_set_colorrgb_b: (a: number, b: number) => void;
export const colorrgb_new: (a: number, b: number, c: number) => number;
export const colorrgb_to_hex: (a: number) => [number, number];
export const __wbg_color_free: (a: number, b: number) => void;
export const color_new: (a: number, b: number) => number;
export const color_to_rgba: (a: number) => [number, number, number];
export const __wbg_ogcuboid_free: (a: number, b: number) => void;
export const ogcuboid_set_id: (a: number, b: number, c: number) => void;
export const ogcuboid_id: (a: number) => [number, number];
export const ogcuboid_new: (a: number, b: number) => number;
export const ogcuboid_set_config: (a: number, b: number, c: number, d: number, e: number) => void;
export const ogcuboid_generate_brep: (a: number) => void;
export const ogcuboid_clean_geometry: (a: number) => void;
export const ogcuboid_generate_geometry: (a: number) => void;
export const ogcuboid_get_brep_serialized: (a: number) => [number, number];
export const ogcuboid_get_geometry_serialized: (a: number) => [number, number];
export const ogcuboid_get_outline_geometry_serialized: (a: number) => [number, number];
export const __wbg_ogpolyline_free: (a: number, b: number) => void;
export const ogpolyline_set_id: (a: number, b: number, c: number) => void;
export const ogpolyline_id: (a: number) => [number, number];
export const ogpolyline_new: (a: number, b: number) => number;
export const ogpolyline_clone: (a: number) => number;
export const ogpolyline_set_config: (a: number, b: number, c: number) => void;
export const ogpolyline_generate_geometry: (a: number) => void;
export const ogpolyline_add_multiple_points: (a: number, b: number, c: number) => void;
export const ogpolyline_add_point: (a: number, b: number) => void;
export const ogpolyline_get_points: (a: number) => [number, number];
export const ogpolyline_get_raw_points: (a: number) => [number, number];
export const ogpolyline_is_closed: (a: number) => number;
export const ogpolyline_check_closed_test: (a: number) => void;
export const ogpolyline_get_brep_serialized: (a: number) => [number, number];
export const ogpolyline_get_geometry_serialized: (a: number) => [number, number];
export const __wbg_matrix4_free: (a: number, b: number) => void;
export const matrix4_elements: (a: number) => [number, number];
export const matrix4_new: () => number;
export const matrix4_set: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: number, n: number, o: number, p: number) => number;
export const matrix4_clone: (a: number) => number;
export const matrix4_identity: (a: number) => void;
export const matrix4_determinant: (a: number) => number;
export const matrix4_adjucate: (a: number) => number;
export const matrix4_inverse: (a: number) => number;
export const matrix4_multiply: (a: number, b: number) => number;
export const matrix4_add: (a: number, b: number) => number;
export const matrix4_subtract: (a: number, b: number) => number;
export const matrix4_get_element_at: (a: number, b: number) => [number, number];
export const matrix4_is_zero: (a: number) => number;
export const matrix4_is_identity: (a: number) => number;
export const matrix4_transpose: (a: number) => number;
export const matrix4_flatten: (a: number) => [number, number];
export const __wbg_matrix3_free: (a: number, b: number) => void;
export const matrix3_new: () => number;
export const matrix3_set: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number) => number;
export const matrix3_clone: (a: number) => number;
export const matrix3_identity: (a: number) => void;
export const matrix3_determinant: (a: number) => number;
export const matrix3_adjucate: (a: number) => number;
export const matrix3_inverse: (a: number) => number;
export const matrix3_transpose: (a: number) => number;
export const __wbg_vector3_free: (a: number, b: number) => void;
export const __wbg_get_vector3_x: (a: number) => number;
export const __wbg_set_vector3_x: (a: number, b: number) => void;
export const __wbg_get_vector3_y: (a: number) => number;
export const __wbg_set_vector3_y: (a: number, b: number) => void;
export const __wbg_get_vector3_z: (a: number) => number;
export const __wbg_set_vector3_z: (a: number, b: number) => void;
export const vector3_new: (a: number, b: number, c: number) => number;
export const vector3_add: (a: number, b: number) => number;
export const vector3_add_scalar: (a: number, b: number) => number;
export const vector3_subtract: (a: number, b: number) => number;
export const vector3_subtract_scalar: (a: number, b: number) => number;
export const vector3_clone: (a: number) => number;
export const vector3_zero: (a: number) => void;
export const vector3_copy: (a: number, b: number) => void;
export const vector3_multiply_scalar: (a: number, b: number) => number;
export const vector3_multiply: (a: number, b: number) => number;
export const vector3_divide: (a: number, b: number) => number;
export const vector3_divide_scalar: (a: number, b: number) => number;
export const vector3_negate: (a: number) => number;
export const vector3_dot: (a: number, b: number) => number;
export const vector3_magnitude: (a: number) => number;
export const vector3_length: (a: number) => number;
export const vector3_normalize: (a: number) => number;
export const vector3_cross: (a: number, b: number) => number;
export const vector3_distance: (a: number, b: number) => number;
export const vector3_apply_matrix4: (a: number, b: number) => void;
export const __wbindgen_exn_store: (a: number) => void;
export const __externref_table_alloc: () => number;
export const __wbindgen_export_2: WebAssembly.Table;
export const __wbindgen_malloc: (a: number, b: number) => number;
export const __wbindgen_realloc: (a: number, b: number, c: number, d: number) => number;
export const __wbindgen_free: (a: number, b: number, c: number) => void;
export const __externref_table_dealloc: (a: number) => void;
export const __externref_drop_slice: (a: number, b: number) => void;
export const __wbindgen_start: () => void;
