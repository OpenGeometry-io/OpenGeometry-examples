/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_ogpolygon_free(a: number, b: number): void;
export function __wbg_get_ogpolygon_extruded(a: number): number;
export function __wbg_set_ogpolygon_extruded(a: number, b: number): void;
export function __wbg_get_ogpolygon_extruded_height(a: number): number;
export function __wbg_set_ogpolygon_extruded_height(a: number, b: number): void;
export function __wbg_get_ogpolygon_is_polygon(a: number): number;
export function __wbg_set_ogpolygon_is_polygon(a: number, b: number): void;
export function __wbg_get_ogpolygon_position(a: number): number;
export function __wbg_set_ogpolygon_position(a: number, b: number): void;
export function __wbg_get_ogpolygon_rotation(a: number): number;
export function __wbg_set_ogpolygon_rotation(a: number, b: number): void;
export function __wbg_get_ogpolygon_scale(a: number): number;
export function __wbg_set_ogpolygon_scale(a: number, b: number): void;
export function ogpolygon_set_id(a: number, b: number, c: number): void;
export function ogpolygon_id(a: number, b: number): void;
export function ogpolygon_new(a: number, b: number): number;
export function ogpolygon_translate(a: number, b: number): void;
export function ogpolygon_new_with_circle(a: number): number;
export function ogpolygon_new_with_rectangle(a: number): number;
export function ogpolygon_add_vertices(a: number, b: number, c: number): void;
export function ogpolygon_add_vertex(a: number, b: number): void;
export function ogpolygon_add_holes(a: number, b: number, c: number): void;
export function ogpolygon_triangulate(a: number, b: number): void;
export function ogpolygon_triangulate_with_holes_variable_geometry(a: number, b: number, c: number): void;
export function ogpolygon_triangulate_with_holes(a: number, b: number): void;
export function ogpolygon_get_buffer_flush(a: number, b: number): void;
export function ogpolygon_clear_buffer(a: number): void;
export function ogpolygon_clear_vertices(a: number): void;
export function ogpolygon_reset_polygon(a: number): void;
export function ogpolygon_extrude_by_height_with_holes(a: number, b: number, c: number): void;
export function ogpolygon_extrude_by_height(a: number, b: number, c: number): void;
export function ogpolygon_get_outlines(a: number, b: number): void;
export function ogpolygon_get_geometry(a: number, b: number): void;
export function ogpolygon_get_brep_data(a: number, b: number): void;
export function ogpolygon_outline_edges(a: number, b: number): void;
export function ogpolygon_binary_tree(a: number, b: number): void;
export function __wbg_colorrgb_free(a: number, b: number): void;
export function __wbg_get_colorrgb_r(a: number): number;
export function __wbg_set_colorrgb_r(a: number, b: number): void;
export function __wbg_get_colorrgb_g(a: number): number;
export function __wbg_set_colorrgb_g(a: number, b: number): void;
export function __wbg_get_colorrgb_b(a: number): number;
export function __wbg_set_colorrgb_b(a: number, b: number): void;
export function colorrgb_new(a: number, b: number, c: number): number;
export function colorrgb_to_hex(a: number, b: number): void;
export function __wbg_color_free(a: number, b: number): void;
export function color_new(a: number, b: number): number;
export function color_to_rgba(a: number, b: number): void;
export function __wbg_ogrectangle_free(a: number, b: number): void;
export function ogrectangle_set_id(a: number, b: number, c: number): void;
export function ogrectangle_id(a: number, b: number): void;
export function ogrectangle_new(a: number, b: number): number;
export function ogrectangle_clone(a: number): number;
export function ogrectangle_set_config(a: number, b: number, c: number, d: number): void;
export function ogrectangle_generate_points(a: number): void;
export function ogrectangle_update_width(a: number, b: number): void;
export function ogrectangle_update_breadth(a: number, b: number): void;
export function ogrectangle_update_center(a: number, b: number): void;
export function ogrectangle_destroy(a: number): void;
export function ogrectangle_get_points(a: number, b: number): void;
export function ogrectangle_get_raw_points(a: number, b: number): void;
export function ogrectangle_dispose_points(a: number): void;
export function __wbg_circlearc_free(a: number, b: number): void;
export function circlearc_set_id(a: number, b: number, c: number): void;
export function circlearc_id(a: number, b: number): void;
export function circlearc_new(a: number, b: number): number;
export function circlearc_clone(a: number): number;
export function circlearc_set_config(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function circlearc_generate_points(a: number): void;
export function circlearc_update_radius(a: number, b: number): void;
export function circlearc_update_center(a: number, b: number): void;
export function circlearc_destroy(a: number): void;
export function circlearc_get_points(a: number, b: number): void;
export function circlearc_get_raw_points(a: number, b: number): void;
export function __wbg_ogcylinder_free(a: number, b: number): void;
export function ogcylinder_set_id(a: number, b: number, c: number): void;
export function ogcylinder_id(a: number, b: number): void;
export function ogcylinder_new(a: number, b: number): number;
export function ogcylinder_set_config(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function ogcylinder_generate_geometry(a: number): void;
export function ogcylinder_get_geometry(a: number, b: number): void;
export function ogcylinder_discard_geometry(a: number): void;
export function ogcylinder_outline_edges(a: number, b: number): void;
export function ogcylinder_get_brep_dump(a: number, b: number): void;
export function circlearc_dispose_points(a: number): void;
export function __wbg_ogsimpleline_free(a: number, b: number): void;
export function ogsimpleline_set_id(a: number, b: number, c: number): void;
export function ogsimpleline_id(a: number, b: number): void;
export function ogsimpleline_new(a: number, b: number): number;
export function ogsimpleline_clone(a: number): number;
export function ogsimpleline_set_config(a: number, b: number, c: number): void;
export function ogsimpleline_destroy(a: number): void;
export function ogsimpleline_get_points(a: number, b: number): void;
export function ogsimpleline_get_raw_points(a: number, b: number): void;
export function ogsimpleline_dispose_points(a: number): void;
export function __wbg_ogpolyline_free(a: number, b: number): void;
export function ogpolyline_set_id(a: number, b: number, c: number): void;
export function ogpolyline_id(a: number, b: number): void;
export function ogpolyline_new(a: number, b: number): number;
export function ogpolyline_clone(a: number): number;
export function ogpolyline_translate(a: number, b: number): void;
export function ogpolyline_set_position(a: number, b: number): void;
export function ogpolyline_add_multiple_points(a: number, b: number, c: number): void;
export function ogpolyline_add_point(a: number, b: number): void;
export function ogpolyline_get_points(a: number, b: number): void;
export function ogpolyline_get_raw_points(a: number, b: number): void;
export function ogpolyline_is_closed(a: number): number;
export function ogpolyline_check_closed_test(a: number): void;
export function ogpolyline_generate_brep(a: number): void;
export function ogpolyline_get_brep_data(a: number, b: number): void;
export function ogpolyline_get_offset(a: number, b: number, c: number): void;
export function ogpolyline_calculate_2D_interesection(a: number, b: number, c: number, d: number): number;
export function __wbg_baseflatmesh_free(a: number, b: number): void;
export function __wbg_get_baseflatmesh_extruded(a: number): number;
export function __wbg_set_baseflatmesh_extruded(a: number, b: number): void;
export function __wbg_get_baseflatmesh_is_mesh(a: number): number;
export function __wbg_set_baseflatmesh_is_mesh(a: number, b: number): void;
export function __wbg_get_baseflatmesh_position(a: number): number;
export function __wbg_set_baseflatmesh_position(a: number, b: number): void;
export function __wbg_get_baseflatmesh_rotation(a: number): number;
export function __wbg_set_baseflatmesh_rotation(a: number, b: number): void;
export function __wbg_get_baseflatmesh_scale(a: number): number;
export function __wbg_set_baseflatmesh_scale(a: number, b: number): void;
export function baseflatmesh_set_id(a: number, b: number, c: number): void;
export function baseflatmesh_id(a: number, b: number): void;
export function baseflatmesh_new(a: number, b: number): number;
export function baseflatmesh_add_vertices(a: number, b: number, c: number): void;
export function baseflatmesh_add_vertex(a: number, b: number): void;
export function baseflatmesh_triangulate(a: number, b: number): void;
export function baseflatmesh_get_buffer_flush(a: number, b: number): void;
export function baseflatmesh_reset_mesh(a: number): void;
export function __wbg_basemesh_free(a: number, b: number): void;
export function __wbg_get_basemesh_is_from_extruded(a: number): number;
export function __wbg_set_basemesh_is_from_extruded(a: number, b: number): void;
export function __wbg_get_basemesh_is_from_polygon(a: number): number;
export function __wbg_set_basemesh_is_from_polygon(a: number, b: number): void;
export function __wbg_get_basemesh_position(a: number): number;
export function __wbg_set_basemesh_position(a: number, b: number): void;
export function __wbg_get_basemesh_rotation(a: number): number;
export function __wbg_set_basemesh_rotation(a: number, b: number): void;
export function __wbg_get_basemesh_scale(a: number): number;
export function __wbg_set_basemesh_scale(a: number, b: number): void;
export function basemesh_set_id(a: number, b: number, c: number): void;
export function basemesh_id(a: number, b: number): void;
export function basemesh_new(a: number, b: number): number;
export function basemesh_outline(a: number, b: number): void;
export function __wbg_basepolygon_free(a: number, b: number): void;
export function __wbg_get_basepolygon_extruded(a: number): number;
export function __wbg_set_basepolygon_extruded(a: number, b: number): void;
export function __wbg_get_basepolygon_extruded_height(a: number): number;
export function __wbg_set_basepolygon_extruded_height(a: number, b: number): void;
export function __wbg_get_basepolygon_is_polygon(a: number): number;
export function __wbg_set_basepolygon_is_polygon(a: number, b: number): void;
export function __wbg_get_basepolygon_position(a: number): number;
export function __wbg_set_basepolygon_position(a: number, b: number): void;
export function __wbg_get_basepolygon_rotation(a: number): number;
export function __wbg_set_basepolygon_rotation(a: number, b: number): void;
export function __wbg_get_basepolygon_scale(a: number): number;
export function __wbg_set_basepolygon_scale(a: number, b: number): void;
export function basepolygon_set_id(a: number, b: number, c: number): void;
export function basepolygon_id(a: number, b: number): void;
export function basepolygon_new(a: number, b: number): number;
export function basepolygon_new_with_circle(a: number): number;
export function basepolygon_new_with_rectangle(a: number): number;
export function basepolygon_add_vertices(a: number, b: number, c: number): void;
export function basepolygon_add_vertex(a: number, b: number): void;
export function basepolygon_add_holes(a: number, b: number, c: number): void;
export function basepolygon_triangulate(a: number, b: number): void;
export function basepolygon_new_triangulate(a: number, b: number): void;
export function basepolygon_get_buffer_flush(a: number, b: number): void;
export function basepolygon_clear_vertices(a: number): void;
export function basepolygon_reset_polygon(a: number): void;
export function basepolygon_extrude_by_height(a: number, b: number, c: number): void;
export function basepolygon_get_outlines(a: number, b: number): void;
export function basepolygon_get_geometry(a: number, b: number): void;
export function __wbg_matrix4_free(a: number, b: number): void;
export function matrix4_elements(a: number, b: number): void;
export function matrix4_new(): number;
export function matrix4_set(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: number, n: number, o: number, p: number): number;
export function matrix4_clone(a: number): number;
export function matrix4_identity(a: number): void;
export function matrix4_determinant(a: number): number;
export function matrix4_adjucate(a: number): number;
export function matrix4_inverse(a: number): number;
export function matrix4_multiply(a: number, b: number): number;
export function matrix4_add(a: number, b: number): number;
export function matrix4_subtract(a: number, b: number): number;
export function matrix4_get_element_at(a: number, b: number, c: number): void;
export function matrix4_is_zero(a: number): number;
export function matrix4_is_identity(a: number): number;
export function matrix4_flatten(a: number, b: number): void;
export function __wbg_vector3_free(a: number, b: number): void;
export function __wbg_get_vector3_x(a: number): number;
export function __wbg_set_vector3_x(a: number, b: number): void;
export function __wbg_get_vector3_y(a: number): number;
export function __wbg_set_vector3_y(a: number, b: number): void;
export function __wbg_get_vector3_z(a: number): number;
export function __wbg_set_vector3_z(a: number, b: number): void;
export function vector3_new(a: number, b: number, c: number): number;
export function vector3_add(a: number, b: number): number;
export function vector3_add_scalar(a: number, b: number): number;
export function vector3_subtract(a: number, b: number): number;
export function vector3_subtract_scalar(a: number, b: number): number;
export function vector3_clone(a: number): number;
export function vector3_zero(a: number): void;
export function vector3_copy(a: number, b: number): void;
export function vector3_multiply_scalar(a: number, b: number): number;
export function vector3_multiply(a: number, b: number): number;
export function vector3_divide(a: number, b: number): number;
export function vector3_divide_scalar(a: number, b: number): number;
export function vector3_negate(a: number): number;
export function vector3_dot(a: number, b: number): number;
export function vector3_magnitude(a: number): number;
export function vector3_length(a: number): number;
export function vector3_normalize(a: number): number;
export function vector3_cross(a: number, b: number): number;
export function vector3_distance(a: number, b: number): number;
export function __wbg_matrix3_free(a: number, b: number): void;
export function matrix3_new(): number;
export function matrix3_set(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number): number;
export function matrix3_clone(a: number): number;
export function matrix3_identity(a: number): void;
export function matrix3_determinant(a: number): number;
export function matrix3_adjucate(a: number): number;
export function matrix3_inverse(a: number): number;
export function __wbindgen_malloc(a: number, b: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number, d: number): number;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number, c: number): void;
